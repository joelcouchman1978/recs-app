name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Prometheus rules (generated)
        run: |
          # Install envsubst if missing
          if ! command -v envsubst >/dev/null 2>&1; then \
            sudo apt-get update && sudo apt-get install -y gettext-base; \
          fi
          # Generate rules from template with defaults
          envsubst < recs-app/infra/alerts/recs.rules.yml.tmpl > /tmp/recs.rules.yml
          if command -v promtool >/dev/null 2>&1; then \
            promtool check rules /tmp/recs.rules.yml; \
          else \
            echo "promtool not installed, skipping lint"; \
          fi
      - name: Create .env
        run: |
          cp recs-app/infra/env.example .env
      - name: Start Postgres/Redis
        run: |
          docker compose -f recs-app/infra/docker-compose.yml up -d postgres redis
      - name: Wait for Postgres
        run: |
          until docker compose -f recs-app/infra/docker-compose.yml exec -T postgres pg_isready -U dev -d recs; do sleep 2; done
      - name: Apply migrations and seed
        run: |
          docker compose -f recs-app/infra/docker-compose.yml run --rm api bash -lc "cd /app && pip install -q -e . && alembic -c /infra/alembic.ini upgrade head && python /app/app/seed_entrypoint.py || true"
      - name: Run pytest
        run: |
          docker compose -f recs-app/infra/docker-compose.yml run --rm api bash -lc "cd /app && pytest -q"

  typegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Create .env
        run: |
          cp recs-app/infra/env.example .env
      - name: Start Postgres/Redis
        run: |
          docker compose -f recs-app/infra/docker-compose.yml up -d postgres redis
      - name: Wait for Postgres
        run: |
          until docker compose -f recs-app/infra/docker-compose.yml exec -T postgres pg_isready -U dev -d recs; do sleep 2; done
      - name: Apply migrations and seed
        run: |
          docker compose -f recs-app/infra/docker-compose.yml run --rm api bash -lc "cd /app && pip install -q -e . && alembic -c /infra/alembic.ini upgrade head && python /app/app/seed_entrypoint.py || true"
      - name: Start API
        run: |
          docker compose -f recs-app/infra/docker-compose.yml up -d api
      - name: Wait for API
        run: |
          for i in {1..60}; do curl -sf http://localhost:8000/readyz && break || sleep 2; done
      - name: Run typegen drift check
        run: |
          bash recs-app/scripts/check_types.sh

  web-e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env
        run: |
          cp recs-app/infra/env.example .env
      - name: Start Postgres/Redis
        run: |
          docker compose -f recs-app/infra/docker-compose.yml up -d postgres redis
      - name: Wait for Postgres
        run: |
          until docker compose -f recs-app/infra/docker-compose.yml exec -T postgres pg_isready -U dev -d recs; do sleep 2; done
      - name: Apply migrations and seed
        run: |
          docker compose -f recs-app/infra/docker-compose.yml run --rm api bash -lc "cd /app && pip install -q -e . && alembic -c /infra/alembic.ini upgrade head && python /app/app/seed_entrypoint.py || true"
      - name: Start API
        run: |
          docker compose -f recs-app/infra/docker-compose.yml up -d api
      - name: Wait for API
        run: |
          for i in {1..60}; do curl -sf http://localhost:8000/readyz && break || sleep 2; done
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install web deps
        working-directory: recs-app/apps/web
        run: |
          pnpm install
      - name: Install Playwright browsers
        working-directory: recs-app/apps/web
        run: |
          npx playwright install --with-deps
      - name: Build and start web
        working-directory: recs-app/apps/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          pnpm build
          nohup pnpm start >/dev/null 2>&1 &
      - name: Wait for Web
        run: |
          for i in {1..60}; do curl -sf http://localhost:3000 && break || sleep 2; done
      - name: Run e2e tests
        working-directory: recs-app/apps/web
        run: |
          pnpm e2e

  prod_like_smoke:
    name: Prod-like compose smoke
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Create prod env
        run: |
          cat > .env <<'ENV'
          ENVIRONMENT=prod
          JWT_SECRET=ci-secret
          ALLOW_ORIGINS=http://localhost:3000
          POSTGRES_USER=dev
          POSTGRES_PASSWORD=dev
          POSTGRES_DB=recs
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          REGION=AU
          USE_REAL_JUSTWATCH=false
          USE_REAL_SERIALIZD=false
          REDIS_URL=redis://redis:6379/0
          RECS_CACHE_TTL=60
          RECS_CACHE_MAX=1000
          FAMILY_COVERAGE_MIN_FIT=0.6
          API_PORT=8000
          WEB_PORT=3000
          APP_VERSION=0.1.0
          GIT_SHA=${{ github.sha }}
          ENV
      - name: Boot infra (db/redis)
        run: docker compose -f recs-app/infra/docker-compose.prod.yml up -d postgres redis
      - name: Wait for Postgres
        run: |
          until docker compose -f recs-app/infra/docker-compose.prod.yml exec -T postgres pg_isready -U dev -d recs; do sleep 2; done
      - name: Apply migrations and seed
        run: |
          docker compose -f recs-app/infra/docker-compose.prod.yml run --rm \
            -v ${{ github.workspace }}/recs-app/infra:/infra \
            api bash -lc "cd /app && pip install -q -e . && alembic -c /infra/alembic.ini upgrade head && python /app/app/seed_entrypoint.py || true"
      - name: Boot API and Web
        run: docker compose -f recs-app/infra/docker-compose.prod.yml up -d api web
      - name: Wait for API health
        run: |
          for i in {1..60}; do curl -sf http://localhost:8000/readyz && break || sleep 2; done
      - name: Exercise recommendations with seed
        run: |
          TOKEN=$(curl -s -X POST http://localhost:8000/auth/magic -H 'Content-Type: application/json' -d '{"email":"demo@local.test"}' | jq -r .token)
          curl -s "http://localhost:8000/recommendations?for=ross&intent=default&seed=123" -H "Authorization: Bearer ${TOKEN}" | jq 'length' | grep -E '^[1-9][0-9]*$'
      - name: Metrics smoke
        run: |
          curl -s http://localhost:8000/metrics | grep -E "recs_request_latency_ms_bucket|recs_cache_hits_total|recs_cache_misses_total"
      - name: Metrics (stale ratio) smoke
        run: |
          curl -s http://localhost:8000/metrics | grep -E "recs_stale_ratio_bucket|recs_items_total|recs_items_stale_total"
      - name: Preflight script
        run: |
          chmod +x recs-app/scripts/preflight.sh
          API_BASE=http://localhost:8000 ./recs-app/scripts/preflight.sh
      - name: Preflight Family Mix guardrail
        run: |
          API_BASE=http://localhost:8000 make -C recs-app preflight-family
      - name: Verify build SHA exposed in /metrics
        run: |
          SHA=${{ github.sha }}
          OUT=$(curl -s http://localhost:8000/metrics | grep recs_build_info || true)
          echo "$OUT" | grep "sha=\"${SHA}\""
      - name: Compose logs on failure
        if: failure()
        run: docker compose -f recs-app/infra/docker-compose.prod.yml logs --no-color > compose_prod_logs.txt || true
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: prod-like-logs
          path: compose_prod_logs.txt

  relay-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install relay test deps
        working-directory: recs-app
        run: |
          python -m pip install -r infra/relay/requirements-dev.txt
      - name: Run relay tests
        working-directory: recs-app
        run: |
          pytest -q infra/relay/tests
