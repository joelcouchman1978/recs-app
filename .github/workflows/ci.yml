name: CI
on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
# ---------- Python (API) ----------
      - name: Detect Python repo
        id: detect_py
        run: |
          if ls -1 **/*.py 2>/dev/null | grep -q . || [ -f requirements.txt ] || [ -f pyproject.toml ]; then
            echo "is_python=true" >> $GITHUB_OUTPUT
          else
            echo "is_python=false" >> $GITHUB_OUTPUT
          fi
          # Streamlit hint (won't apply to this repo; harmless)
          if grep -Rqi "streamlit" requirements.txt pyproject.toml . 2>/dev/null; then
            echo "looks_streamlit=true" >> $GITHUB_OUTPUT
          else
            echo "looks_streamlit=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.detect_py.outputs.is_python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python deps (best effort)
        if: steps.detect_py.outputs.is_python == 'true'
        run: |
          python -m pip install -U pip wheel
          if [ -f pyproject.toml ]; then
            pip install -e ".[dev]" || true
            pip install -e . || true
          fi
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest || true

      - name: Run pytest (if tests exist; SQLite/no-Redis)
        if: steps.detect_py.outputs.is_python == 'true'
        env:
          USE_SQLITE: "1"
          DISABLE_REDIS: "1"
        run: |
          if ls -1 tests/*.py apps/api/tests/*.py test_*.py *_test.py 2>/dev/null | grep -q .; then
            echo "Tests detected, running pytest..."
            pytest -q
          else
            echo "No tests detected â€” passing CI per policy."
          fi

      # Optional Streamlit healthcheck (skips if not applicable)
      - name: Streamlit healthcheck (8501)
        if: steps.detect_py.outputs.is_python == 'true' && steps.detect_py.outputs.looks_streamlit == 'true'
        env:
          START_CMD: "streamlit run app.py --server.port 8501 --server.headless true"
          HEALTH_URL: "http://localhost:8501/"
          WAIT_SECS: "120"
          SLEEP_SECS: "3"
        run: |
          set -euo pipefail
          python -c "import streamlit" 2>/dev/null || pip install streamlit
          if [ ! -f app.py ]; then
            echo "No app.py; skipping Streamlit healthcheck."
            exit 0
          fi
          bash -lc "$START_CMD >> health.log 2>&1 & echo \$! > app.pid"
          trap 'kill $(cat app.pid) 2>/dev/null || true' EXIT
          end=$((SECONDS + WAIT_SECS))
          ok=0
          while [ $SECONDS -lt $end ]; do
            if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then ok=1; break; fi
            sleep "$SLEEP_SECS"
          done
          if [ "$ok" -ne 1 ]; then
            echo "Healthcheck failed within ${WAIT_SECS}s"
            echo "---- Last 200 lines of health.log ----"
            tail -n 200 health.log || true
            exit 1
          fi
          echo "Healthcheck OK."

      # ---------- Node (Web) ----------
      - name: Detect web
        id: detect_web
        run: |
          if [ -f apps/web/package.json ]; then
            echo "has_web=true" >> $GITHUB_OUTPUT
          else
            echo "has_web=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node (web)
        if: steps.detect_web.outputs.has_web == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Build Next.js web
        if: steps.detect_web.outputs.has_web == 'true'
        run: |
          corepack enable || true
          pnpm --version || npm i -g pnpm
          pnpm -C apps/web install
          pnpm -C apps/web build
